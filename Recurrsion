(* The code here will be added to the top of your code automatically.
   You do NOT need to copy it into your code.
*)

exception NotImplemented;;

let close ((x: float), (y: float)) = abs_float (x -. y) < 0.0001;;

let square (x: float) = x *. x;;

let cube (x:float) = x *. x*. x;;

let odd n = (n mod 2) = 1;;

(* Q1 TODO: Correct these tests for the double function. *)
let double_tests = [
  (* (0, 1);
    (1, 1);
    (3, 5);
  *)
  
  (0, 0);
  (1, 2);
  (3, 6);
]

(* Q1 TODO: Correct this implementation so that it compiles and returns
         the correct answers.
*)
let double n = match n with
    (*| n -> 2 + double n - 1 *)
  |0 -> 0
  |n ->  n*2 
         


(* Q1 TODO: Write your own tests for the fact function.
         See the provided tests for double, above, for how to write test cases.
         Remember that you should NOT test cases for n < 0.
*)
let fact_tests = [
  (* Your test cases go here.
     Remember that the outputs of fact should be *floating-point* numbers.
  *)
  
  (0, 1.0);
  (1, 1.0);
  (2, 2.0);
  (3, 6.0);
  
  
]

(* Q1 TODO: Correct this implementation so that it compiles and returns
         the correct answers.
*)
let rec fact (n: int): float = match n with
  | 0 -> 1.0
           (*| _ -> n * factorial n - 1*)
  | _ -> (float_of_int n) *. fact(  n - 1)

(* Q2 TODO: Write your own tests for the mysqrt function.
         You should NOT test cases for n < 0.
*)
let mysqrt_tests = [
  (* Your test cases go here. *)
  (1.0, 1.0);
  (0.0, 0.0);
  (4.0, 2.0);
  (9.0, 3.0);
]

(* Q2 TODO: Implement mysqrt. *)
    (*let mysqrt (x:float) = raise NotImplemented*)
let  mysqrt (x:float)  = 
  let rec helper_sqrt (x,g) =
    if  close(x, square(g))then g
    else helper_sqrt(x, (g+. (x /.g)) /. 2.0) 
  in 
  helper_sqrt(x, Random.float 10.0)
  
  

    
(* Q3 TODO: Write your own tests for the cube_root function.
            You should NOT test cases for n < 0.
*)
let cube_root_tests = [
  (* Your test cases go here. *)
  (1.0, 1.0);
  (0.0, 0.0);
  (27.0, 3.0);
  
  
]

(* Q3 TODO: Implement cube_root. *)
    (*let cube_root (x:float) = raise NotImplemented*)
let cube_root (x:float)  =
  let rec helper_cube (x,g) =
    if  close(x, cube(g)) then g
    else helper_cube(x, ((g *. 2.0 +. (x /. square(g)) )/. 3.0))
  in 
  helper_cube(x, Random.float 20.0)
  
                  
                  
  
(* Q4 TODO: Write your own tests for the fast_exp function.
            You should NOT test cases for negative bases or powers.
*)
let fast_exp_tests = [
  (* Your test cases go here. *)
  ((3,0),1);
  ((0,1),0);
  ((1,1),1);
  ((2,3),8);
  
  
]

(* Q4 TODO: Implement tail recursive helper fast_exp_aux. *)
let rec fast_exp_aux (base, power, acc) = 
  if (base=0 ) then base
  else if power=0 then acc 
  else if odd power then  fast_exp_aux(base*base, (power-1)/2, base*acc)
  else fast_exp_aux(base*base, (power/2), acc)
    

(* Q4 TODO: Implement fast_exp using fast_exp_aux. *)
  (*let fast_exp (base, power) = raise NotImplemented*)
let fast_exp (base, power) =
  fast_exp_aux (base, power,1)

                           

